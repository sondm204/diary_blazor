@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="col-span-9 h-full p-8 dark:bg-gray-800 bg-white">
	<div class="flex flex-col gap-2 justify-center items-center">
		<h1 class="text-3xl font-bold">Nhật ký bản thân</h1>
		<p class="text-gray-500 text-center px-20">
			Chào mừng đến với nhật ký cá nhân của tôi. Tại đây tôi chia sẻ những suy nghĩ, kinh nghiệm và suy ngẫm của mình về hành trình cuộc sống.
		</p>
	</div>
	<div class="flex flex-col gap-4 mt-4">
		@* card *@
		@foreach (var diary in diaries)
		{
			<LumexCard @onclick="() => NavigateToDetail(diary.Id)" Shadow="Shadow.Large" Class="hover:translate-y-[-5px] hover:shadow-2xl !transition-all duration-300 cursor-pointer">
				<LumexCardHeader Class="p-0 h-64 w-full">
					<img class="w-full" src="https://media.istockphoto.com/id/1457889029/photo/group-of-food-with-high-content-of-dietary-fiber-arranged-side-by-side.jpg?s=612x612&w=0&k=20&c=SEyObHsbBsrd1XZlgEg389VT86BMFKZKfKReKyVPAk4=" alt="@diary.Title" />
				</LumexCardHeader>
				<LumexCardBody>
					<div class="text-center font-bold text-2xl">@diary.Title</div>
					<p class="text-gray-500 line-clamp-3">
						@diary.Content
					</p>
					<div class="text-end text-sm text-gray-500">@diary.PublicedAt?.ToString("dd/MM/yyyy")</div>
				</LumexCardBody>
				<LumexDivider />
				<LumexCardFooter Class="flex justify-evenly items-center py-3">
					<LumexButton StartContent="@favoriteIcon" Class="@(AppState?.CurrentUser?.Likes?.Any(l => l.DiaryId == diary.Id) == true ? "text-red-500" : "text-gray-500")">Thích @diary.Likes.Count</LumexButton>
					<LumexButton StartContent="@commentIcon" Class="text-gray-500">Bình luận @diary.Comments.Count</LumexButton>
					<LumexButton StartContent="@shareIcon" Class="text-gray-500">Chia sẻ</LumexButton>
				</LumexCardFooter>
			</LumexCard>
		}
	</div>
</div>

@code {
	private RenderFragment favoriteIcon =>@<i class="fa-solid fa-heart"></i>;
	private RenderFragment commentIcon =>@<i class="fa-solid fa-comment"></i>;
	private RenderFragment shareIcon =>@<i class="fa-solid fa-share"></i>;

	DiaryContext context = new DiaryContext();
	List<Diary> diaries = new List<Diary>();
	protected override void OnInitialized()
	{
		base.OnInitialized();
		getDiaries();
	}

	private bool _isInitialized = false;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && !_isInitialized)
		{
			_isInitialized = true;

			// Gọi JS sau khi đã render
			string currentUserId = await JSRuntime.InvokeAsync<string>("createOrGetAnonymousUser");

			if (currentUserId != null)
			{
				var user = context.Users
					.Include(u => u.Likes)
					.FirstOrDefault(u => u.Id == currentUserId);

				if (user == null)
				{
					user = new User
					{
						Id = currentUserId,
						Username = "user" + new Random().Next(100000, 1000000)
					};

					context.Users.Add(user);
					context.SaveChanges();
				}

				AppState.CurrentUser = user;
			}
			StateHasChanged();
		}
	}

	protected void getDiaries()
	{
		// Load diaries from the database
		diaries = context.Diaries
		.Include(d => d.Likes)
		.Include(d => d.Comments)
		.Where(d => d.IsActive == 1 && d.IsPublic == 1)
		.OrderByDescending(d => d.PublicedAt).ToList();
	}

	private void NavigateToDetail(string id)
	{
		Navigation.NavigateTo($"view/{id}");
	}
}