@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="col-span-9 h-full p-8 dark:bg-gray-800 bg-white">
	<div class="flex flex-col gap-2 justify-center items-center">
		<h1 class="text-3xl font-bold">Nhật ký bản thân</h1>
		<p class="text-gray-500 text-center px-20">
			Chào mừng đến với nhật ký cá nhân của tôi. Tại đây tôi chia sẻ những suy nghĩ, kinh nghiệm và suy ngẫm của mình về hành trình cuộc sống.
		</p>
	</div>
	<div class="grid grid-cols-12 gap-4 mt-4">
		@* card *@
		@if (Diaries.Count == 0)
		{
			<div class="col-span-12 text-2xl font-bold text-center mt-20">Không có nhật ký nào</div>
		}
		@foreach (var diary in Diaries)
		{
			<LumexCard @onclick="() => NavigateToDetail(diary.Id)" Shadow="Shadow.Large" Class="col-span-6 hover:translate-y-[-5px] hover:shadow-2xl !transition-all duration-300 cursor-pointer">
				<LumexCardHeader Class="p-0 h-64 w-full">
					<img class="w-full" src="@diary.Thumbnail" alt="@diary.Title" />
				</LumexCardHeader>
				<LumexCardBody>
					<div class="text-center font-bold text-2xl">@diary.Title</div>
					<p class="text-gray-500 line-clamp-3 max-h-40">
						@(FilterContent(diary.Content))
					</p>
					<div class="flex justify-between items-center mt-3">
						<div class="flex gap-2 items-center">
							@foreach (Tag tag in diary.Tags)
							{
								<div class="px-3 py-1 rounded-full bg-gray-300 text-xs font-semibold"><i class="fa-solid fa-tags"></i> @tag.Name</div>
							}
						</div>
						<div class="text-end text-sm text-gray-500">@diary.PublicedAt?.ToString("dd/MM/yyyy")</div>
					</div>
				</LumexCardBody>
				<LumexDivider />
				<LumexCardFooter Class="flex justify-evenly items-center py-3 overflow-visible">
					<div @onclick:stopPropagation>
						<LumexButton @onclick="() => HandleLike(diary.Id)"
									 StartContent="@favoriteIcon"
									 Class="@(AppState?.CurrentUser?.Likes?.Any(l => l.DiaryId == diary.Id) == true ? "text-red-500" : "text-gray-500")">
							Thích @diary.Likes.Count
						</LumexButton>
					</div>
					<LumexButton StartContent="@commentIcon" Class="text-gray-500">Bình luận @diary.Comments.Count</LumexButton>
					<div class="relative inline-block">
						<span @onclick="() => TogglePopup(diary.Id)"
							  @onclick:stopPropagation
							  title="Chia sẻ"
							  class="cursor-pointer text-2xl text-gray-500 hover:text-blue-500">
							<LumexButton StartContent="@shareIcon" Class="text-gray-500">Chia sẻ</LumexButton>
						</span>

						@if (showPopup)
						{
							<div @onclick:stopPropagation class="absolute z-[1000] mt-2 w-64 bg-white border border-gray-300 rounded-lg shadow-lg p-4 -translate-y-full -translate-x-full">
								<input type="text" value="@ShareText" class="mb-2 text-sm text-gray-700 overflow-hidden whitespace-nowrap border p-2 text-ellipsis max-w-full">
								<button @onclick="CopyToClipboard"
										class="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600 text-sm">
									Copy
								</button>
							</div>
						}
					</div>
				</LumexCardFooter>
			</LumexCard>
		}
	</div>
</div>

@code {
	[Parameter] public string UserId { get; set; }
	private RenderFragment favoriteIcon =>@<i class="fa-solid fa-heart"></i>;
	private RenderFragment commentIcon =>@<i class="fa-solid fa-comment"></i>;
	private RenderFragment shareIcon =>@<i class="fa-solid fa-share"></i>;

	// DiaryContext context = new DiaryContext();
	// List<Diary> Diaries = new List<Diary>();
	[Parameter] public List<Diary> Diaries { get; set; }
	protected override void OnInitialized()
	{
		base.OnInitialized();
		// getDiaries();
	}

	private bool _isInitialized = false;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && !_isInitialized)
		{
			_isInitialized = true;

			if (AppState.CurrentUser == null)
			{
				string currentUserId = await JSRuntime.InvokeAsync<string>("createOrGetAnonymousUser");
				if (currentUserId != null)
				{
					var user = context.Users
						.Include(u => u.Likes)
						.FirstOrDefault(u => u.Id == currentUserId);

					if (user == null)
					{
						user = new User
						{
							Id = currentUserId,
							Username = "user" + new Random().Next(100000, 1000000)
						};

						context.Users.Add(user);
						context.SaveChanges();
					}

					AppState.CurrentUser = user;
				}
			}
			// Gọi JS sau khi đã render
			StateHasChanged();
		}
	}

	protected void getDiaries()
	{
		// Load Diaries from the database
		Diaries = context.Diaries
		.Include(d => d.Likes)
		.Include(d => d.Comments)
		.Where(d => d.IsActive == 1 && d.IsPublic == 1)
		.OrderByDescending(d => d.PublicedAt).ToList();
	}

	private void NavigateToDetail(string id)
	{
		Navigation.NavigateTo($"view/{UserId}/{id}");
	}

	private MarkupString FilterContent(string html)
	{
		string filtered = Regex.Replace(html, @"<img[^>]*\/?>", "", RegexOptions.IgnoreCase);
		filtered = Regex.Replace(filtered, @"<\/?p[^>]*>", "", RegexOptions.IgnoreCase);
		filtered = Regex.Replace(filtered, @"\s{2,}", " ");
		filtered = filtered.Trim();
		return new MarkupString(filtered);
	}

	private bool showPopup = false;
	private string ShareText = "";

	private void TogglePopup(string id)
	{
		ShareText = $"https://localhost:7074/view/{UserId}/{id}";
		showPopup = !showPopup;
	}

	private async Task CopyToClipboard()
	{
		ToastService.ShowSuccess("Đã sao chép liên kết chia sẻ thành công");
		await JS.InvokeVoidAsync("navigator.clipboard.writeText", ShareText);
	}

	private void HandleLike(string id)
	{
		bool isLiked = AppState.CurrentUser.Likes.Any(item => item.DiaryId == id); ;
		if (isLiked)
		{
			var like = AppState.CurrentUser.Likes.FirstOrDefault(item => item.DiaryId == id);
			if (like != null)
			{
				context.Likes.Remove(like);
				AppState.CurrentUser.Likes.Remove(like);
				context.SaveChanges();
			}
			isLiked = false;
		}
		else
		{
			Guid guid = Guid.NewGuid();
			string newLikeId = guid.ToString();
			var newLike = new Like
			{
				Id = newLikeId,
				UserId = AppState.CurrentUser.Id,
				DiaryId = id,
			};

			context.Likes.Add(newLike);
			AppState.CurrentUser.Likes.Add(newLike);
			context.SaveChanges();
			isLiked = true;
		}
	}
}