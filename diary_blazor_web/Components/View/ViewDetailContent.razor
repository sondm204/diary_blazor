@rendermode InteractiveServer

<PageTitle>View Detail</PageTitle>

<div class="col-span-9 h-full p-8 dark:bg-gray-800 bg-white">
	<a href=@($"../view/{UserId}") class="flex gap-2 items-center hover:text-blue-500 cursor-pointer">
		<i class="fa-regular fa-circle-left"></i>
		Quay lại
	</a>
	@if(showDiary)
	{
	<div class="flex flex-col gap-4">
		<div class="flex flex-col gap-4 shadow-lg rounded-lg border border-gray-200 p-4">
			<div class="text-center text-3xl font-semibold">@diary.Title</div>
			<div>
				@((MarkupString)diary.Content)
			</div>
		</div>
		<div>
			<LumexButton StartContent="@favoriteIcon" Class="@(isLiked ? "text-red-500" : "text-gray-500")" OnClick="HandleLike">Thích (@diary.Likes.Count)</LumexButton>
			<div class="my-3 text-lg font-semibold">Nhận xét (@comments.Count)</div>
			<div id="comment-list" class="flex flex-col gap-3 max-h-56 my-3 overflow-y-auto">
				@foreach (Comment cmt in comments)
				{
					<div class="flex gap-2">
						<div class="rounded-full bg-red-500 w-10 h-10">
							<img src="./images/user-image.jpg" alt="User Avatar" />
						</div>
						<div class="flex flex-col">
							<div class="font-semibold">@cmt.User.Username</div>
							<p class="text-sm">@cmt.Content</p>
						</div>
					</div>
				}
			</div>
			@if (diary.AllowComments == 1)
			{
				<LumexTextbox @bind-Value="currentCmt" @onkeyup="HandleKeyUp" Variant="InputVariant.Flat" Type="@InputType.Text" Placeholder="Nhập bình luận của bạn..." />
			}
		</div>
		</div>

	}else
	{
		<div class="text-center mt-10 text-2xl font-bold">Không xem được nhật ký</div>
	}
</div>

@code {
	[Parameter] public string id { get; set; }
	[Parameter] public string UserId { get; set; }
	private bool showDiary = false;

	private RenderFragment favoriteIcon =>@<i class="fa-solid fa-heart"></i>;
	// DiaryContext context = new DiaryContext();

	private Diary diary;
	private List<Comment> comments;
	private string currentCmt;

	private string currentUserId;
	private bool isLiked;


	protected override async Task OnInitializedAsync()
	{
		if (!string.IsNullOrEmpty(id))
		{
			diary = context.Diaries
			.Include(d => d.Tags)
			.Include(d => d.Likes)
			.Include(d => d.Comments)
			.FirstOrDefault(d => d.Id == id);
			if (diary != null)
			{
				if(diary.IsPublic == 1)
				{
					showDiary = true;
				}
				else
				{
					showDiary = false;
				}
				comments = context.Comments
				.Include(c => c.User)
				.Where(c => c.DiaryId == id)
				.OrderBy(c => c.CreatedAt)
				.ToList();
			}else
			{
				showDiary = false;
			}
		}
		else
		{
			diary = new Diary();
		}
		StateHasChanged();
	}

	private bool _isInitialized = false;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && !_isInitialized)
		{
			_isInitialized = true;
			if (AppState.CurrentUser == null)
			{

				// Gọi JS sau khi đã render
				currentUserId = await JSRuntime.InvokeAsync<string>("createOrGetAnonymousUser");

				if (currentUserId != null)
				{
					var user = context.Users
						.Include(u => u.Likes)
						.FirstOrDefault(u => u.Id == currentUserId);

					if (user == null)
					{
						user = new User
						{
							Id = currentUserId,
							Username = "user" + new Random().Next(100000, 1000000),
							IsGuest = 1,
						};

						context.Users.Add(user);
						context.SaveChanges();
					}

					AppState.CurrentUser = user;
				}
			}

			if (AppState.CurrentUser?.Likes != null)
			{
				isLiked = AppState.CurrentUser.Likes.Any(item => item.DiaryId == id);
			}

			await JS.InvokeVoidAsync("scrollToBottom", "comment-list");

			// Trigger re-render nếu cần
			StateHasChanged();
		}
	}

	private async void HandleKeyUp(KeyboardEventArgs e)
	{
		if (e.Key == "Enter")
		{
			HandleComment();
		}
	}

	private async void HandleComment()
	{
		if (currentCmt != "")
		{
			Guid guid = Guid.NewGuid();
			string newCmtId = guid.ToString();
			Comment newCmt = new Comment
			{
				Id = newCmtId,
				DiaryId = id,
				UserId = AppState.CurrentUser.Id,
				Content = currentCmt,
			};
			context.Comments.Add(newCmt);
			AppState.CurrentUser.Comments.Add(newCmt);
			try
			{
				context.SaveChanges();
			}
			catch (Exception e)
			{
				throw e;
			}
			finally
			{
				currentCmt = "";
			}
			comments = context.Comments
				.Include(c => c.User)
				.Where(c => c.DiaryId == id)
				.OrderBy(c => c.CreatedAt)
				.ToList();
			await JS.InvokeVoidAsync("scrollToBottom", "comment-list");
		}
	}

	private void HandleLike()
	{
		if (isLiked)
		{
			var like = AppState.CurrentUser.Likes.FirstOrDefault(item => item.DiaryId == id);
			if (like != null)
			{
				context.Likes.Remove(like);
				AppState.CurrentUser.Likes.Remove(like);
				context.SaveChanges();
			}
			isLiked = false;
		}
		else
		{
			Guid guid = Guid.NewGuid();
			string newLikeId = guid.ToString();
			var newLike = new Like
			{
				Id = newLikeId,
				UserId = AppState.CurrentUser.Id,
				DiaryId = id,
			};

			context.Likes.Add(newLike);
			AppState.CurrentUser.Likes.Add(newLike);
			context.SaveChanges();
			isLiked = true;
		}
	}

}
