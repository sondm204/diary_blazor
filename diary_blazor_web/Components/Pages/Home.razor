@page "/dashboard/{id}"
@page "/dashboard"
@page "/"

@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<PageTitle>Diary - Dashboard</PageTitle>

<AuthorizeView>
	<Authorized>
		@if (isAuthorized)
		{
			<div class="flex bg-gray-100 dark:bg-[#282135] h-full">
				@* sidebar *@
				<div class="w-64 border-r border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 p-4 flex flex-col">
					<div class="pb-2 border-b border-gray-200 dark:border-gray-700">
						<div @onclick="(() => NavigationToEditor(null))" class="text-center p-2 bg-yellow-200/70 rounded-full text-lg text-yellow-700 font-semibold cursor-pointer hover:scale-105 transition-all duration-200">
							<i class="fa-solid fa-plus"></i>
							Bài đăng mới
						</div>
					</div>
					<div class="flex flex-col gap-1">
						<div class="flex gap-2 items-center rounded-lg p-3 cursor-pointer hover:bg-gray-200 dark:text-white hover:dark:bg-gray-600">
							<i class="fa-solid fa-newspaper"></i>
							Bài đăng
						</div>
						@* <div class="flex gap-2 items-center rounded-lg p-3 cursor-pointer hover:bg-gray-200 dark:text-white hover:dark:bg-gray-600">
							<i class="fa-solid fa-chart-column"></i>
							Thống kê
						</div>
						<div class="flex gap-2 items-center rounded-lg p-3 cursor-pointer hover:bg-gray-200 dark:text-white hover:dark:bg-gray-600">
							<i class="fa-solid fa-message"></i>
							Nhận xét
						</div> *@

						<div class="border-b border-b-gray-300 dark:border-b-gray-600"></div>

						<a href=@($"/view/{id}") class="flex gap-2 items-center rounded-lg p-3 cursor-pointer hover:bg-gray-200 dark:text-white hover:dark:bg-gray-600">
							<i class="fa-solid fa-arrow-up-right-from-square"></i>
							Xem nhật ký
						</a>
					</div>
				</div>

				@* content *@
				<div class="w-full bg-white p-8 flex flex-col gap-2 dark:bg-gray-800 dark:text-white">
					<div class="flex items-center justify-between">
						<LumexSelect TValue="string"
									 Label=""
									 Class="w-52"
									 @bind-Value="@(_selectedFilter)">
							@foreach (var filter in _filter)
							{
								<LumexSelectItem @key=@filter Value="@filter.Key" OnClick="HandleFilter" TextValue="@filter.Value">@filter.Value</LumexSelectItem>
							}

						</LumexSelect>
						<div>Quản lý</div>
					</div>
					<div class="flex flex-col gap-4">
						@if (diaries.Count == 0)
						{
							<div class="text-2xl font-bold text-center mt-20">Không có nhật ký nào</div>
						}
						else
						{
							@foreach (var diary in diaries)
							{
								<DiaryItem Diary="@diary"
										   UserId="@id"
										   OnClick="() => NavigationToEditor(diary.Id)"
										   OnHandlePublish="() => HandlePublish(diary.Id)"
										   OnHandleTrash="() => HandleTrash(diary.Id)"
										   OnHandleDelete="() => HandleDelete(diary.Id)" />
							}
						}
					</div>
				</div>
			</div>
		}
		else
		{
			<div class="font-bold text-2xl text-center mt-40">Không có quyền truy cập</div>
		}
	</Authorized>
	<NotAuthorized>

	</NotAuthorized>
</AuthorizeView>

@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }
	private AuthenticationState authenticationState;

	[Parameter]
	public string? id { get; set; }

	private bool isAuthorized = false;
	private List<Diary> allDiaries = new List<Diary>();
	private Dictionary<string, string> _filter = new Dictionary<string, string>();
	private string _selectedFilter = "all";


	// DiaryContext context = new DiaryContext();
	List<Diary> diaries = new List<Diary>();
	protected override async void OnInitialized()
	{
		ResetStatus();
		authenticationState = await authenticationStateTask;
		if (!authenticationState.User.Identity.IsAuthenticated)
		{
			NavigationManager.NavigateTo("/login");
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			// var authenticationState = await authenticationStateTask;
			if (!authenticationState.User.Identity.IsAuthenticated)
			{
				NavigationManager.NavigateTo("/login");
			}
			if (id == null)
			{
				string username = AppState.CurrentUser.Username;
				User user = context.Users.FirstOrDefault(u => u.Username == username);
				// AppState.SetCurrentUser(user);
				NavigationManager.NavigateTo($"/dashboard/{user.Id}");
			}
			else
			{
				User user = context.Users.Find(id);
				if (authenticationState.User.Identity.Name != user.Username)
				{
					isAuthorized = false;
				}
				else
				{
					isAuthorized = true;
				}
			}
			StateHasChanged();
		}
	}

	private void ResetStatus()
	{
		getDiaries();
		resetFilter();
		HandleFilter();
	}

	protected void getDiaries()
	{
		// Load diaries from the database
		allDiaries = context.Diaries
		.Include(d => d.Tags)
		.Include(d => d.Likes)
		.Include(d => d.Comments)
		.Include(d => d.User)
		.Where(d => d.User.Id == id)
		.OrderByDescending(d => d.UpdatedAt)
		.ToList();
		// diaries = allDiaries.Where(d => d.IsActive == 1).ToList();
	}

	private void resetFilter()
	{
		_filter = new()
		{
			["all"] = $"Tất cả ({allDiaries.Count})",
			["publish"] = $"Đã xuất bản ({allDiaries.Where(d => d.IsPublic == 1).ToList().Count})",
			["draft"] = $"Chưa xuất bản ({allDiaries.Where(d => d.IsPublic == 0).ToList().Count})",
			["trash"] = $"Thùng rác ({allDiaries.Where(d => d.IsActive == 0).ToList().Count})"
		};
	}

	private void HandleFilter()
	{
		switch (_selectedFilter)
		{
			case "publish":
				diaries = allDiaries.Where(d => d.IsPublic == 1).ToList();
				break;
			case "draft":
				diaries = allDiaries.Where(d => d.IsPublic == 0).ToList();
				break;
			case "trash":
				diaries = allDiaries.Where(d => d.IsActive == 0).ToList();
				break;
			default:
				diaries = allDiaries.Where(d => d.IsActive == 1).ToList();
				break;
		}
	}

	private async void HandlePublish(string id)
	{
		Diary diary = allDiaries.FirstOrDefault(d => d.Id == id);
		if (diary.IsPublic == 1)
		{
			diary.IsPublic = 0;
			diary.PublicedAt = null;
			await ToastService.ShowSuccess("Chuyển đổi trạng thái thành \"Chưa xuất bản\"!");
		}
		else
		{
			diary.IsPublic = 1;
			diary.PublicedAt = DateTime.Now;
			await ToastService.ShowSuccess("Chuyển đổi trạng thái thành \"Xuất bản\"!");
		}
		context.SaveChanges();
		ResetStatus();
	}

	private async void HandleTrash(string id)
	{
		Diary diary = allDiaries.FirstOrDefault(d => d.Id == id);
		if (diary.IsActive == 1)
		{
			diary.IsActive = 0;
			diary.IsPublic = 0;
			diary.PublicedAt = null;
			await ToastService.ShowSuccess("Chuyển nhật ký vào thùng rác!");
		}
		else
		{
			diary.IsActive = 1;
			await ToastService.ShowSuccess("Phục hồi nhật ký thành công!");
		}
		context.SaveChanges();
		ResetStatus();
	}

	private async void HandleDelete(string id)
	{
		Diary diary = allDiaries.FirstOrDefault(d => d.Id == id);
		context.Diaries.Remove(diary);
		try
		{
			context.SaveChanges();
			await ToastService.ShowSuccess("Xóa nhật ký thành công!");

		}
		catch (Exception e)
		{
			await ToastService.ShowError("Không thể xóa nhật ký!");
		}
		finally
		{
			ResetStatus();
		}
	}

	private void NavigationToEditor(string? id)
	{
		// Navigate to the editor page with the specified diary ID
		NavigationManager.NavigateTo($"/editor/{id}");
	}
}
