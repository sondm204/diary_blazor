@page "/editor/{id}"
@page "/editor"
@rendermode InteractiveServer
@inject IWebHostEnvironment env

<PageTitle>Diary - Chỉnh sửa nhật ký</PageTitle>

<div class="grid grid-cols-12 h-screen">
	<div class="col-span-10">
		<LumexTextbox Type="@InputType.Text"
					  Size="LumexUI.Common.Size.Large"
					  @bind-Value="diary.Title"
					  Label="Tiêu đề"
					  Placeholder="Nhập tiêu đề"
					  Class="w-full" />
		<textarea id="editor" @bind="diary.Content" placeholder="Nhập nội dung" class="form-control" style="width: 100%; height: calc(100% - 150px)"></textarea>
	</div>
	<div class="col-span-2">
		<div class="">
			<div class="flex gap-2 justify-evenly mb-2 mt-2">
				<LumexButton Color="ThemeColor.Default" Variant="Variant.Ghost">Xem trước</LumexButton>
				<LumexButton Color="ThemeColor.Primary" Variant="Variant.Solid" OnClick="HandleButtonClick">Lưu</LumexButton>
			</div>
			<LumexDivider />
			<div class="p-3">
				<h2 class="font-bold text-2xl text-center">Cài đặt nhật ký</h2>
				<div class="flex flex-col">
					<div class="border-b border-b-gray-300">
						<div class="flex gap-2 w-full cursor-pointer p-4 hover:bg-gray-200 rounded-lg" @onclick="@(() => ToggleExpansion("tag"))">
							<span class="@(_expanded["tag"] ? "rotate-180" : "")"><i class="fa-solid fa-caret-down"></i></span>
							<span>Nhãn</span>
						</div>
						<LumexCollapse As="ul"
									   Expanded="@_expanded["tag"]"
									   Class="ml-4">
							<div>
								<div class="flex gap-1 whitespace-nowrap overflow-x-scroll">
									@foreach (Tag tag in selectedTags)
									{
										<div class="text-xs p-1 bg-gray-300 rounded-full">
											<i class="fa-solid fa-tags"></i>
											@tag.Name
											<span @onclick="() => selectedTags.Remove(tag)" class="cursor-pointer hover:scale-105"><i class="fa-solid fa-xmark"></i></span>
										</div>
									}
								</div>
								<LumexTextbox Variant="InputVariant.Underlined" Value="@tagSearchValue" ValueChanged="HandleSearchTag" Type="@InputType.Text" Placeholder="Tìm nhãn..." />
								<LumexListbox TValue="string">
									@foreach (var tag in filterTags)
									{
										<LumexListboxItem OnClick="() => HandleSelectTag(tag.Id)" Value="@tag.Id">@tag.Name</LumexListboxItem>
									}
								</LumexListbox>
							</div>
						</LumexCollapse>
					</div>
					<div class="border-b border-b-gray-300">
						<div class="flex gap-2 w-full cursor-pointer p-4 hover:bg-gray-200 rounded-lg" @onclick="@(() => ToggleExpansion("publish"))">
							<span class="@(_expanded["publish"] ? "rotate-180" : "")"><i class="fa-solid fa-caret-down"></i></span>
							<span>Được xuất bản vào</span>
						</div>
						<LumexCollapse As="ul"
									   Expanded="@_expanded["publish"]"
									   Class="ml-4">
							<input type="date" @bind-value="diary.PublicedAt" @bind-value:format="yyyy-MM-dd" />
						</LumexCollapse>
					</div>
					<div class="border-b border-b-gray-300">
						<div class="flex gap-2 w-full cursor-pointer p-4 hover:bg-gray-200 rounded-lg" @onclick="@(() => ToggleExpansion("share"))">
							<span class="@(_expanded["share"] ? "rotate-180" : "")"><i class="fa-solid fa-caret-down"></i></span>
							<span>Chia sẻ</span>
						</div>
						<LumexCollapse As="ul"
									   Expanded="@_expanded["share"]"
									   Class="ml-4">
							<LumexCheckboxGroup>
								<LumexCheckbox @bind-Value="IsPublic">Công khai</LumexCheckbox>
								<LumexCheckbox @bind-Value="AllowComments">Cho phép bình luận</LumexCheckbox>
							</LumexCheckboxGroup>
						</LumexCollapse>
					</div>
					<div class="border-b border-b-gray-300">
						<div class="flex gap-2 w-full cursor-pointer p-4 hover:bg-gray-200 rounded-lg" @onclick="@(() => ToggleExpansion("thumbnail"))">
							<span class="@(_expanded["thumbnail"] ? "rotate-180" : "")"><i class="fa-solid fa-caret-down"></i></span>
							<span>Thumbnail</span>
						</div>
						<LumexCollapse As="ul"
									   Expanded="@_expanded["thumbnail"]"
									   Class="ml-4">
							@* <img src="@diary.Thumbnail" alt="Alternate Text" /> *@
							@if (croppedImageUrl != null)
							{
								<img src="@croppedImageUrl" class="w-20 h-20 object-cover rounded" style="max-width: 300px;" />
							}
							<InputFile class="mt-3" OnChange="LoadImage" accept="image/*" />

						</LumexCollapse>
					</div>
				</div>
			</div>
		</div>
	</div>

	@if (showCropper)
	{
		<div class="fixed top-0 right-0 bottom-0 left-0 bg-black/75 z-[1000]">
			<div class="flex justify-center items-center w-full h-full">
				<div class="flex flex-col gap-2">
					<img @key="previewUrl" class="w-1/2 h-1/2" id="imageToCrop" src="@previewUrl" style="max-width: 100%; width: 400px; height: auto; object-fit: cover" />
					<div class="flex gap-2 justify-center">
						<LumexButton OnClick="() => showCropper = false">Hủy</LumexButton>
						<LumexButton Color="ThemeColor.Primary" OnClick="CropAndUpload">Cắt và Lưu</LumexButton>
					</div>
				</div>

			</div>
		</div>
	}
</div>

@code {
	private string? previewUrl;
	private string? croppedImageUrl;
	private bool showCropper = false;
	private IBrowserFile? selectedFile;

	private async Task LoadImage(InputFileChangeEventArgs e)
	{
		selectedFile = e.File;

		using var stream = selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
		using var ms = new MemoryStream();
		await stream.CopyToAsync(ms);

		var buffer = ms.ToArray();
		previewUrl = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";

		showCropper = true;
		StateHasChanged();

		// Delay nhỏ để ảnh render xong
		await Task.Delay(300);
		await JS.InvokeVoidAsync("cropperInterop.initCropper", "imageToCrop");
	}

	private async Task CropAndUpload()
	{
		try
		{
			string? base64 = await JS.InvokeAsync<string>("cropperInterop.getCroppedImage");
			if (base64 != null)
			{
				var base64Data = base64.Split(',')[1];
				var bytes = Convert.FromBase64String(base64Data);

				// Lưu file
				var fileName = Guid.NewGuid() + ".jpg";
				var path = Path.Combine(env.WebRootPath, "uploads", fileName);
				await File.WriteAllBytesAsync(path, bytes);

				croppedImageUrl = $"/uploads/{fileName}";
				showCropper = false;
				StateHasChanged();
			}
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
		}

	}

	private Boolean isCreate = false;
	[Parameter] public string id { get; set; }
	// DiaryContext context = new DiaryContext();
	Diary diary = new Diary();
	List<Tag>
	allTags = new List<Tag>();
	List<Tag> filterTags = new List<Tag>();
	List<Tag> selectedTags = new List<Tag>();
	string tagSearchValue = "";
	private bool IsPublic
	{
		get => diary.IsPublic.HasValue && diary.IsPublic.Value != 0;
		set => diary.IsPublic = (byte)(value ? 1 : 0);
	}

	private bool AllowComments
	{
		get => diary.AllowComments.HasValue && diary.AllowComments.Value != 0;
		set => diary.AllowComments = (byte)(value ? 1 : 0);
	}


	protected override void OnInitialized()
	{
		if (!string.IsNullOrEmpty(id))
		{
			diary = context.Diaries
			.Include(d => d.Tags)
			.Include(d => d.Likes)
			.Include(d => d.Comments)
			.FirstOrDefault(d => d.Id == id);
			if (diary != null)
			{
				selectedTags = diary.Tags.ToList();
				croppedImageUrl = diary.Thumbnail;
			}
		}
		else
		{
			diary = new Diary();
		}

		allTags = context.Tags.Where(t => t.UserId == AppState.CurrentUser.Id).ToList();

		isCreate = id == null;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JS.InvokeVoidAsync("initTinyMCE", "editor");
		}
	}

	private void HandleSearchTag(string value)
	{
		filterTags = allTags
		.Where(t => !string.IsNullOrEmpty(t.Name) && t.Name.Contains(value.Trim(), StringComparison.OrdinalIgnoreCase))
		.ToList();
	}

	private void HandleSelectTag(string tagId)
	{
		Tag tag = allTags.FirstOrDefault(t => t.Id == tagId);
		if (!selectedTags.Contains(tag))
		{
			selectedTags.Add(tag);
		}
		tagSearchValue = "";
	}

	private Dictionary<string, bool>
		_expanded = new Dictionary<string, bool>
			()
			{
								{ "tag", true },
								{ "publish", true },
								{ "share", true},
								{ "thumbnail", true},
			};

	private void ToggleExpansion(string key)
	{
		_expanded[key] = !_expanded[key];
	}

	private void HandleButtonClick()
	{
		if (isCreate) HandleCreate();
		else HandleSubmit();
	}

	private async void HandleSubmit()
	{
		diary.Content = await JS.InvokeAsync<string>
			("getTinyMCEContent", "editor");
		diary.Tags = selectedTags;
		diary.UpdatedAt = DateTime.Now;
		diary.Thumbnail = croppedImageUrl ?? diary.Thumbnail;
		if (!IsPublic)
		{
			diary.PublicedAt = null;
			diary.IsPublic = 0;
		}
		else
		{
			diary.IsPublic = 1;
			if (diary.PublicedAt == null)
			{
				diary.PublicedAt = DateTime.Now;
			}
		}
		if (AllowComments)
		{
			diary.AllowComments = 1;
		}
		else
		{
			diary.AllowComments = 0;
		}
		context.SaveChanges();
		await ToastService.ShowSuccess("Cập nhật thành công!");
	}

	private async void HandleCreate()
	{
		JS.InvokeVoidAsync("console.log", "create: " + diary.Content);
		Guid newId = Guid.NewGuid();
		diary.Id = newId.ToString();
		diary.Tags = selectedTags;
		diary.UpdatedAt = DateTime.Now;
		diary.UserId = AppState.CurrentUser.Id;
		diary.Thumbnail = croppedImageUrl ?? diary.Thumbnail;
		if (!IsPublic)
		{
			diary.PublicedAt = null;
		}
		else
		{
			if (diary.PublicedAt == null)
			{
				diary.PublicedAt = DateTime.Now;
			}
		}
		if (AllowComments)
		{
			diary.AllowComments = 1;
		}
		else
		{
			diary.AllowComments = 0;
		}
		context.Diaries.Add(diary);
		try
		{
			context.SaveChanges();

		}
		catch (Exception e)
		{

		}
		finally
		{
			NavigationManager.NavigateTo($"/editor/{newId}");
		}
		await ToastService.ShowSuccess("Tạo nhật ký thành công!");
	}
}

